package com.neotech.pages;

public class Recap {
	
//	Maven - is a build automation tool for Java projects (Gradle, Ant)
//
//	Why automation testers use Maven?
//	1. Build the project structure (folder)
//	2. Manage Dependencies
//	3. Run automation scripts from command line
//
//	To create the Maven Project:
//	File --> New Project --> Maven --> Maven Project --> Create a simple project -->
//		Group Id == company/organization (com.neotech)
//		Artifact Id == projectName (TestNGFramework) --> click Finish
//
//	In your Maven Project
//		main - application code (for developer)
//		test - test code (for testers)
//		pom.xml - this is the heart of maven project where we will store all configurations
//		target - everything generated by maven (compiled code and reports)
//
//	--------------------------------
//	POM - Page Object Model - is a design pattern (NOT A FRAMEWORK)
//	Main concept:
//		for each webpage we will build separate java class where we will store all page related elements and methods that can be performed
//	POM can be achieved in 2 ways:
//		without PageFactory
//		with PageFactory
//	--------------------------------
//	pom.xml --> maven dependencies
//
//	Add this line of code for Maven to use Java 1.8
//	<properties>
//	    <maven.compiler.source>1.8</maven.compiler.source>
//	    <maven.compiler.target>1.8</maven.compiler.target>
//	</properties>
//
//	Dependencies - your project will have a dependency of tools that are needed for your project. Now instead of downloading all the jar files manually one bu one and adding them to our project, we will be using maven tool. (pom.xml)
//	--------------------------------
//	Components of the framework
//		resources:
//			configs --> configuration.properties file which contains url, username, password, etc.
//			drivers --> we don't need anymore
//			testdata --> excel files with different testing data.
//		utils:
//			CommonMethods.java --> methods to perform on web driver
//			ConfigsReader.java --> reading properties from configuration.properties file
//			Constants.java --> final variables (constants) for properties file path, testdata, reports, etc.
//			ExcelUtility.java --> methods to handle excel files
//		testbase:
//			BaseClass.java --> initialize the driver and quit it.
//			Listeners.java --> to listen every event happening at the code.
//		pages:
//			We follow POM and we store each page element in the respective java class.
//			LoginPageElements.java --> has the WebElements of the Login page.
//			DashboardPageElements.java --> has the WebElements of the Dashboard page.
//			Other pages...
//		testcases:
//			LoginTest.java
//			AddEmployeeTest.java
//			DisciplineTest.java
//			Other test...
//			In this package we have our test cases to test the functionality of our application.
//
//	target folder --> output/results of our test execution.
//	--------------------------------
//	maven repositories:
//		local (.m2)
//		remote (company based)
//		central (maven repository https://mvnrepository.com/)
//	. Adding Extent Reports
//	- We need to add the dependency in pom.xml file
//	- We specify the filepath where to put the report
//    - We need to create an object of ExtentSparkReporter --> we set some specific configurations such as title, name, theme...
//	- We create an object of ExtentReports to attach the above spark reporter
//	- We are using the ExtentReports object to call the createTest() method
//		- We added it to Listener class to create a test each time a test method is executed (onTestStart)
//		- This test is added to the report along with every comment/info added to it during the test method or on pass/fail
//
//	- We added the extent report object in the @BeforeTest and @AfterTest methods so that:
//		- @BeforeTest creates the necessary objects and configurations
//		- @AfterTest flushes (writes) the report to the file
//
//2. We changed the takeScreenshot(String filename)
//	- We are now saving the location where the screenshot is stored and we pass this info to the addScreenCaptureFromPath() method to show the screenshot in the report
//	- We made the screenshot unique by adding a timestamp on the name when taking a screenshot
//
//3. We updated the Listener.java class
//	- We are not only printing to the console
//	- We are also writing information/screenshot to the ExtentReports
//
//4. We created the regression.xml file which will run the test methods that belong to the regression group
//
//5. Maven Surefire Plugin
//	- added plugin to pom.xml
//	- it runs specified tests on maven build process
//
//6. Maven Lifecycles
//	- build
//	- clean
//	- test.....
//	AddEmployee --- I can run them from Java Class
//	@BeforeTest
//	@BeforeMethod
//		@Test
//	@AfterMethod
//		..
//		..
//		..
//@AfterTest
//
//
//
//
//
//AddEmployee --- I can run them from the xml file
//
//@BeforeTest ---> before the contents here get executed, the OnStart listener method kicks in
//	@BeforeMethod
//		- when we are about to start executing the @Test, onTestStart is called
//			- this is where we initialize the ExtentTest object
//		@Test
//		- after the @Test is done
//			- if test passed, then OnTestSuccess is called
//			- if test failed, then OnTestFailure is called
//	@AfterMethod
//		..
//		..
//		..
//@AfterTest
//
//
//
//
//
//Implicit Wait: 
//- protects us ONLY from element not found
//
//
//Explicit Wait: 
//- protects us ONLY for a certain condition
//
//
//
//1. TestNG				Done
//2. Groups				Done
//3. Assertions			Done
//4. Excel 				Done
//4.1 Reporting and Screenshot 	Done
//5. Maven				Done
//6. Listeners			Done
//
//
//
//Class1							Class2 extends BaseClass
//- test1							- testA
//- test2							- testB
//- test3
//
//Group smoke: test1, test2, testA
//
//
//
//
//Reporting: what do we want to know?
//- for each test batch
//	- for each test case 
//		- for each step
//			- did it work?
//			- do I have an issue
//			
//			
//
//
//@BeforeTest --- create the report document/object	
//Listener intervention - OnTestStart
//	- create the test object... (at this point, I know which test is about to start)
//	- keep logs through test steps
//Listener Intervention - at the end of test, we call either OnTestFailure or OnTestSuccess
//	..
//	.
//	.
//	..
//@AfterTest -- push the collected information to the report document/object
//
//
//
//Take Screenshot process:
//- onTestFailure
//	- save the file in this folder: screenshots/failed/testNameTimeStamp.jpg
//	- attach the file on this location (screenshots/failed/testNameTimeStamp.jpg) to the report
//
//- onTestSuccess
//	- save the file in this folder: screenshots/passed/testNameTimeStamp.jpg
//	- attach the file on this location (screenshots/passed/testNameTimeStamp.jpg) to the report
//	
//	
//Maven has a build lifecycle: 
//- validation ... compiling ... testing ... .... ... ..  deployment
//	TestNG is a framework designed to simplify broad range of testing needs, from unit test to integration or regression testing.

//What is a framework?
//Framework is a set of rules and guideline used to write and design your test cases.
//
//What is Assertion?
//The process of comparing actual result vs expected result.
//
//Two types of Assertions
//1. Hard Assert
//In hard assertion the execution will stop and it will not proceed further.
//
//2. Soft Assert
//In soft assert the execution will continue regardless of test passed or failed.
//
//What is testng.xml?
//It is a fundamental unit of testNG which allows us to execute our test cases in structured and customized way.
//
//What is parametrization?
//A process of running same test case multiple times with different input values/test data.
//
//How to achieve parametrization in TestNG?
//Using data provider. DataProvider is an annotation which we use with a method and that method will be returning 2D Array.
//
//=====================POM===================
//What is Page Object Model?
//POM is a design pattern for enhancing test maintenance and reducing code duplication.
//It is design pattern to create object repository for Web based applications.
//
//In POM for each web page, there should be a corresponding page class.
//
//Elements of a Web Page can be implemented/used/managed in two ways.
//
//1. POM without PageFactory.
//This is the regular way of managing web elements.
//
//2. POM with PageFactory
//PageFactory is an inbuilt page object model concept for selenium webdriver and it is very optimized by using @FindBy annotation and initElements method.
//
//=====================Maven===================
//Maven is a software project management tool. With Maven we can import all dependent libraries and can also create project structures. 
//A Maven is basically a tool used to compile our applications. 
//It helps to develop and manage project structure or applications like deployment, clean, packaging, jar and many more features for the Java-based project.
//
//What is Archetype?
//Archetype is a Maven project template toolkit. Archetypes are templates to create a variety of java project structures.
//
//What is pom.xml
//The pom.xml is a fundamental unit of work in maven. It is an xml file that contains the information required to build a project in just the way you want.
//
//What is dependency in Maven?
//Dependency is one of the core features of Maven. It allows you to copy and/or unpack jar files from local, central and remote repositories.
//It lets you define your project dependencies, features, and behaviors.
//
//Types of Dependency:
//Direct: 
//These are dependencies defined in your pom.xml file under <dependencies/> section.
//
//Transitive: 
//These are dependencies that are dependencies of your direct dependencies.							|
//								|
//								|
//								|
//							maven surefire plugin
//	

}
